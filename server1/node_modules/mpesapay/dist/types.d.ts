declare class MpesaPay {
    constructor(consumerKey: string, consumerSecret: string, businessShortCode: string, passkey: string, accountReference: string, transactionDesc: string, partyA: string, b2cSecurityCredential: string, initiatorName: string, environment?: 'sandbox' | 'live');
    AccessToken(): Promise<string>;
    stkPush(amount: string, phoneNumber: string, callbackUrl: string): Promise<any>;
    transactionStatus(transactionId: string, callbackUrl: string): Promise<any>;
    business2Customer(PaymentAmount: number, receiversPhonenumber: number, remarks: string, callbackUrl: string): Promise<any>;
    accountBalance(callbackUrl: string): Promise<any>;
}
export function generateUniqueReferenceNumber(prefix: string, length: number): string;
interface CallbackMetadataItem {
    Name: string;
    Value: string;
}
interface Body {
    stkCallback: {
        ResultCode: number;
        CallbackMetadata: {
            Item: CallbackMetadataItem[];
        };
    };
}
interface Data {
    Body: Body;
}
interface PaymentInfo {
    Amount: string;
    MpesaReceiptNumber: string;
    TransactionDate: string;
    PhoneNumber: string;
}
interface PaymentResult {
    status: 'canceled' | 'failed' | 'success';
    data?: PaymentInfo;
    message?: string;
    resultCode?: number;
}
export function FormatPaymentData(data: Data): PaymentResult;
interface ResultParameter {
    Key: string;
    Value: string;
}
interface ResultParameters {
    ResultParameter: ResultParameter[];
}
interface Result {
    ResultType: number;
    ResultCode: number;
    ResultDesc: string;
    ResultParameters: ResultParameters;
}
interface AccountBalanceData {
    Result: Result;
}
interface AccountBalance {
    accountName: string;
    currency: string;
    balance: string;
    availableBalance: string;
    reservedAmount: string;
    unClearedBalance: string;
}
interface AccountBalanceResult {
    resultCode: number;
    status: 'failed' | 'success';
    accountBalances: AccountBalance[];
}
export function FormatAccountBalance(data: AccountBalanceData): AccountBalanceResult;
interface _ResultParameter1 {
    Key: string;
    Value: string | number;
}
interface _ResultParameters1 {
    _ResultParameter1: _ResultParameter1[];
}
interface ReferenceItem {
    Key: string;
    Value: string;
}
interface ReferenceData {
    ReferenceItem: ReferenceItem;
}
interface _Result1 {
    ResultType: number;
    ResultCode: number;
    ResultDesc: string;
    OriginatorConversationID: string;
    ConversationID: string;
    TransactionID: string;
    _ResultParameters1: _ResultParameters1;
    ReferenceData: ReferenceData;
}
interface BusinessToCustomerResponse {
    _Result1: _Result1;
}
interface TransactionDetails {
    TransactionAmount: string | number;
    TransactionReceipt: string;
    ReceiverPartyPublicName: string;
    TransactionCompletedDateTime: string;
    B2CUtilityAccountAvailableFunds: string | number;
    B2CWorkingAccountAvailableFunds: string | number;
    B2CRecipientIsRegisteredCustomer: string;
    B2CChargesPaidAccountAvailableFunds: string | number;
}
interface _PaymentResult1 {
    status: 'success' | 'failed';
    resultCode: number;
    data?: TransactionDetails;
}
export function FormatBusinessToCustomer(data: BusinessToCustomerResponse): _PaymentResult1;
export default MpesaPay;

//# sourceMappingURL=types.d.ts.map
