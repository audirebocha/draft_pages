{"mappings":"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","sources":["src/index.ts","src/transactions/mpesapay.ts","src/utils/accesstoken.ts","src/transactions/businesstocustomer/index.ts","src/transactions/businesstocustomer/B2cRequestBody.ts","src/utils/Config.ts","src/transactions/mpesaexpress/index.ts","src/utils/timestamp.ts","src/transactions/mpesaexpress/ExpressRequestBody.ts","src/utils/Password.ts","src/transactions/transactionstatus/index.ts","src/transactions/transactionstatus/transactionRequestBody.ts","src/transactions/accountbalance/index.ts","src/transactions/accountbalance/balanceRequestBody.ts","src/helpers.ts","src/helpers/UniqueReferenceNumber.ts","src/helpers/FormatPaymentData.ts","src/helpers/FormatAccountBalance.ts","src/helpers/FormatBusinessToCustomer.ts"],"sourcesContent":["import MpesaPay from './transactions/mpesapay';\nexport default MpesaPay;\nexport {\n  generateUniqueReferenceNumber,\n  FormatPaymentData,\n  FormatAccountBalance,\n  FormatBusinessToCustomer,\n} from './helpers';\n","import generateAccessToken from '../utils/accesstoken';\nimport B2C from './businesstocustomer';\nimport MpesaExpress from './mpesaexpress';\nimport checkTransactionStatus from './transactionstatus';\nimport getAccountBalance from './accountbalance';\n\nclass MpesaPay {\n  private consumerKey: string;\n  private consumerSecret: string;\n  private businessShortCode: string;\n  private passkey: string;\n  private accountReference: string;\n  private transactionDesc: string;\n  private partyA: string;\n  private b2cSecurityCredential: string;\n  private initiatorName: string;\n  private environment: string;\n\n  constructor(\n    consumerKey: string,\n    consumerSecret: string,\n    businessShortCode: string,\n    passkey: string,\n    accountReference: string,\n    transactionDesc: string,\n    partyA: string,\n    b2cSecurityCredential: string,\n    initiatorName: string,\n    environment: 'sandbox' | 'live' = 'sandbox'\n  ) {\n    this.consumerKey = consumerKey;\n    this.consumerSecret = consumerSecret;\n    this.businessShortCode = businessShortCode;\n    this.passkey = passkey;\n    this.accountReference = accountReference;\n    this.transactionDesc = transactionDesc;\n    this.partyA = partyA;\n    this.b2cSecurityCredential = b2cSecurityCredential;\n    (this.initiatorName = initiatorName),\n      (this.environment =\n        environment === 'live'\n          ? 'https://api.safaricom.co.ke'\n          : 'https://sandbox.safaricom.co.ke');\n  }\n\n  //stkpush method for directly initiating a pop to the specified phonenumber with the amount to payed\n  //accesstoken\n\n  async AccessToken() {\n    return await generateAccessToken(\n      this.consumerKey,\n      this.consumerSecret,\n      this.environment\n    );\n  }\n\n  public async stkPush(\n    amount: string,\n    phoneNumber: string,\n    callbackUrl: string\n  ): Promise<any> {\n    const accessToken = await this.AccessToken();\n    return await MpesaExpress(\n      amount,\n      phoneNumber,\n      callbackUrl,\n      this.businessShortCode,\n      this.passkey,\n      accessToken,\n      this.environment,\n      this.accountReference,\n      this.transactionDesc\n    );\n  }\n\n  public async transactionStatus(\n    transactionId: string,\n    callbackUrl: string\n  ): Promise<any> {\n    const accessToken = await this.AccessToken();\n    return await checkTransactionStatus(\n      transactionId,\n      callbackUrl,\n      this.initiatorName,\n      accessToken,\n      this.b2cSecurityCredential,\n      this.partyA,\n      this.environment\n    );\n  }\n\n  public async business2Customer(\n    PaymentAmount: number,\n    receiversPhonenumber: number,\n    remarks: string,\n    callbackUrl: string\n  ): Promise<any> {\n    const accessToken = await this.AccessToken();\n    return await B2C(\n      PaymentAmount,\n      receiversPhonenumber,\n      remarks,\n      this.b2cSecurityCredential,\n      callbackUrl,\n      this.initiatorName,\n      this.partyA,\n      accessToken,\n      this.environment\n    );\n  }\n  public async accountBalance(callbackUrl: string): Promise<any> {\n    const accessToken = await this.AccessToken();\n    return await getAccountBalance(\n      this.partyA,\n      callbackUrl,\n      this.initiatorName,\n      this.b2cSecurityCredential,\n      accessToken,\n      this.environment\n    );\n  }\n}\n\nexport default MpesaPay;\n","import axios, { AxiosResponse } from 'axios';\n\nexport default async function generateAccessToken(\n  consumerKey: string,\n  consumerSecret: string,\n  environment: string\n): Promise<string | null> {\n  const credentials = Buffer.from(`${consumerKey}:${consumerSecret}`).toString(\n    'base64'\n  );\n  const config = {\n    headers: {\n      Authorization: `Basic ${credentials}`,\n    },\n  };\n\n  try {\n    const response: AxiosResponse<any> = await axios.get(\n      `${environment}/oauth/v1/generate?grant_type=client_credentials`,\n      config\n    );\n    return response.data.access_token;\n  } catch (error) {\n    return null;\n  }\n}\n\n","import axios, { AxiosResponse } from 'axios';\nimport { initMpesaBusiness2CustomerRequestBody } from './B2cRequestBody';\nimport Config from '../../utils/Config';\n\nexport default async function B2C(\n  amount: number,\n  partyB: number,\n  remarks: string,\n  b2cSecurityCredential: string,\n  callbackUrl: string,\n  initiator: string,\n  partyA: string,\n  accessToken: string,\n  environment: string\n): Promise<any> {\n  const requestBody = initMpesaBusiness2CustomerRequestBody(\n    amount,\n    partyB,\n    remarks,\n    b2cSecurityCredential,\n    callbackUrl,\n    initiator,\n    partyA\n  );\n\n  try {\n    const response: AxiosResponse<any> = await axios.post(\n      `${environment}/mpesa/b2c/v1/paymentrequest`,\n      requestBody,\n      await Config(accessToken)\n    );\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n}\n","export function initMpesaBusiness2CustomerRequestBody(\n  amount: number,\n  partyB: number,\n  remarks: string,\n  b2cSecurityCredential: string,\n  callbackUrl: string,\n  initiator: string,\n  partyA: string\n): Record<string, string | number> {\n  return {\n    InitiatorName: initiator,\n    SecurityCredential: b2cSecurityCredential,\n    CommandID: 'BusinessPayment',\n    Amount: amount,\n    PartyA: parseInt(partyA),\n    PartyB: partyB,\n    Remarks: remarks,\n    QueueTimeOutURL: callbackUrl,\n    ResultURL: callbackUrl,\n    Occassion: remarks,\n  };\n}\n\n\n","export default async function Config(accessToken: string): Promise<any> {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      'Content-Type': 'application/json',\n    },\n  };\n  return config;\n}\n","import { timeStamp } from '../../utils/timestamp';\nimport axios, { AxiosResponse } from 'axios';\nimport { initMpesaExpressRequestBody } from './ExpressRequestBody';\nimport Config from '../../utils/Config';\nimport generatePassword from '../../utils/Password';\n\nexport default async function MpesaExpress(\n  amount: string,\n  phoneNumber: string,\n  callbackUrl: string,\n  businessShortCode: string,\n  passkey: string,\n  accessToken: string,\n  environment: string,\n  accountReference: string,\n  transactionDesc: string\n): Promise<any> {\n  const password = generatePassword(businessShortCode, passkey);\n  const requestBody = initMpesaExpressRequestBody(\n    amount,\n    phoneNumber,\n    callbackUrl,\n    timeStamp,\n    password,\n    businessShortCode,\n    accountReference,\n    transactionDesc\n  );\n\n  try {\n    const response: AxiosResponse<any> = await axios.post(\n      `${environment}/mpesa/stkpush/v1/processrequest`,\n      requestBody,\n      await Config(accessToken)\n    );\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n}\n","export const timeStamp = new Date()\n  .toISOString()\n  .replace(/[^0-9]/g, '')\n  .slice(0, -3);\n","export function initMpesaExpressRequestBody(\n  amount: string,\n  phoneNumber: string,\n  callbackUrl: string,\n  timeStamp: string,\n  password: string,\n  businessShortCode: string,\n  accountReference: string,\n  transactionDesc: string\n): Record<string, string> {\n  return {\n    BusinessShortCode: businessShortCode,\n    Password: password,\n    Timestamp: timeStamp,\n    TransactionType: 'CustomerPayBillOnline',\n    Amount: amount,\n    PartyA: phoneNumber,\n    PartyB: businessShortCode,\n    PhoneNumber: phoneNumber,\n    CallBackURL: callbackUrl,\n    AccountReference: accountReference,\n    TransactionDesc: transactionDesc,\n  };\n}\n","import { timeStamp } from \"./timestamp\";\n\nexport default function generatePassword(businessShortCode: string, passKey: string): string {\n  return Buffer.from(`${businessShortCode}${passKey}${timeStamp}`).toString(\n    'base64'\n  );\n}\n","import axios, { AxiosResponse } from 'axios';\nimport Config from '../../utils/Config';\nimport initTransactionStatusRequestBody from './transactionRequestBody';\n\n//public method for checking status of the initiated stkpush, #payed, #canceled, # successfull\n\nexport default async function checkTransactionStatus(\n  transactionId: string,\n  callbackUrl: string,\n  initiator: string,\n  accessToken: string,\n  b2cSecurityCredential: string,\n  partyA: string,\n  environment: string\n): Promise<any> {\n  const requestBody = initTransactionStatusRequestBody(\n    transactionId,\n    b2cSecurityCredential,\n    callbackUrl,\n    initiator,\n    partyA\n  );\n\n  try {\n    const response: AxiosResponse<any> = await axios.post(\n      `${environment}/mpesa/transactionstatus/v1/query`,\n      requestBody,\n      await Config(accessToken)\n    );\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n}\n","export default function initTransactionStatusRequestBody(\n  transactionId: string,\n  b2cSecurityCredential: string,\n  callbackUrl: string,\n  initiator: string,\n  partyA: string\n): Record<string, any> {\n  return {\n    Initiator: initiator,\n    SecurityCredential: b2cSecurityCredential,\n    CommandID: 'TransactionStatusQuery',\n    TransactionID: transactionId,\n    PartyA: partyA,\n    IdentifierType: '4',\n    ResultURL: callbackUrl,\n    QueueTimeOutURL: callbackUrl,\n    Remarks: 'done',\n    Occasion: 'OK',\n  };\n}\n","import axios, { AxiosResponse } from 'axios';\nimport Config from '../../utils/Config';\nimport initAccountBalanceRequestBody from './balanceRequestBody';\n\n//check the total transacted amount for your paybill or till number\n\nexport default async function getAccountBalance(\n  partyA: string,\n  callbackUrl: string,\n  initiatorName: string,\n  b2cSecurityCredential: string,\n  accessToken: string,\n  environment: string\n): Promise<any> {\n  const requestBody = initAccountBalanceRequestBody(\n    partyA,\n    callbackUrl,\n    initiatorName,\n    b2cSecurityCredential\n  );\n\n  try {\n    const response: AxiosResponse<any> = await axios.post(\n      `${environment}/mpesa/accountbalance/v1/query`,\n      requestBody,\n      await Config(accessToken)\n    );\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n}\n","export default function initAccountBalanceRequestBody(\n  partyA: string,\n  callbackUrl: string,\n  initiator: string,\n  b2cSecurityCredential: string\n): Record<string, any> {\n  return {\n    Initiator: initiator,\n    SecurityCredential: b2cSecurityCredential,\n    CommandID: 'AccountBalance',\n    PartyA: partyA,\n    IdentifierType: 4,\n    Remarks: 'done',\n    QueueTimeOutURL: callbackUrl,\n    ResultURL: callbackUrl,\n  };\n}\n\n\n","import generateUniqueReferenceNumber from \"./helpers/UniqueReferenceNumber\";\nimport FormatPaymentData from \"./helpers/FormatPaymentData\";\nimport FormatAccountBalance from \"./helpers/FormatAccountBalance\";\nimport FormatBusinessToCustomer from \"./helpers/FormatBusinessToCustomer\";\nexport {\n  generateUniqueReferenceNumber,\n  FormatPaymentData,\n  FormatAccountBalance,\n  FormatBusinessToCustomer,\n};","const usedReferenceNumbers: Set<string> = new Set();\n\nexport default function generateUniqueReferenceNumber(prefix: string, length: number): string {\n  let referenceNumber: string;\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  const charactersLength = characters.length;\n  do {\n    referenceNumber = `${prefix}-`;\n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * charactersLength);\n      const randomChar = characters.charAt(randomIndex);\n      referenceNumber += randomChar;\n    }\n  } while (usedReferenceNumbers.has(referenceNumber));\n  usedReferenceNumbers.add(referenceNumber);\n  return referenceNumber;\n}\n\n","interface CallbackMetadataItem {\n  Name: string;\n  Value: string;\n}\n\ninterface Body {\n  stkCallback: {\n    ResultCode: number;\n    CallbackMetadata: {\n      Item: CallbackMetadataItem[];\n    };\n  };\n}\n\ninterface Data {\n  Body: Body;\n}\n\ninterface PaymentInfo {\n  Amount: string;\n  MpesaReceiptNumber: string;\n  TransactionDate: string;\n  PhoneNumber: string;\n}\n\ninterface PaymentResult {\n  status: 'canceled' | 'failed' | 'success';\n  data?: PaymentInfo;\n  message?: string;\n  resultCode?: number;\n}\n\nexport default function FormatPaymentData(data: Data): PaymentResult {\n  function extractData(data: Data): PaymentInfo {\n    const { Amount, MpesaReceiptNumber, TransactionDate, PhoneNumber } =\n      data.Body.stkCallback.CallbackMetadata.Item.reduce((acc, item) => {\n        acc[item.Name as keyof PaymentInfo] = item.Value;\n        return acc;\n      }, {} as PaymentInfo);\n\n    return { Amount, MpesaReceiptNumber, TransactionDate, PhoneNumber };\n  }\n\n  const resultscode = data.Body.stkCallback.ResultCode;\n\n  if (data && resultscode === 0) {\n    const paymentinfo = extractData(data);\n    return {\n      status: 'success',\n      data: {\n        Amount: paymentinfo.Amount,\n        MpesaReceiptNumber: paymentinfo.MpesaReceiptNumber,\n        PhoneNumber: paymentinfo.PhoneNumber,\n        TransactionDate: paymentinfo.TransactionDate,\n      },\n      resultCode: resultscode,\n    };\n  } else {\n    if (data && resultscode === 17) {\n      return {\n        status: 'failed',\n        message: 'Unable to process',\n        resultCode: resultscode,\n      };\n    } else {\n      return {\n        status: 'canceled',\n        message: 'Canceled transaction',\n        resultCode: resultscode,\n      };\n    }\n  }\n}\n","interface ResultParameter {\n  Key: string;\n  Value: string;\n}\n\ninterface ResultParameters {\n  ResultParameter: ResultParameter[];\n}\n\ninterface Result {\n  ResultType: number;\n  ResultCode: number;\n  ResultDesc: string;\n  ResultParameters: ResultParameters;\n}\n\ninterface AccountBalanceData {\n  Result: Result;\n}\n\ninterface AccountBalance {\n  accountName: string;\n  currency: string;\n  balance: string;\n  availableBalance: string;\n  reservedAmount: string;\n  unClearedBalance: string;\n}\n\ninterface AccountBalanceResult {\n  resultCode: number;\n  status: 'failed' | 'success';\n  accountBalances: AccountBalance[];\n}\n\nexport default function FormatAccountBalance(\n  data: AccountBalanceData\n): AccountBalanceResult {\n  const accountBalanceResult =\n    data.Result.ResultParameters.ResultParameter.find(\n      (param) => param.Key === 'AccountBalance'\n    );\n\n  if (!accountBalanceResult) {\n    return {\n      resultCode: data.Result.ResultCode,\n      status: 'failed',\n      accountBalances: [],\n    };\n  }\n\n  const accountBalanceString = accountBalanceResult.Value;\n  const accountBalanceItems = accountBalanceString.split('&');\n\n  const formattedAccountBalances: AccountBalance[] = accountBalanceItems.map(\n    (item) => {\n      const [\n        accountName,\n        currency,\n        balance,\n        availableBalance,\n        reservedAmount,\n        unClearedBalance,\n      ] = item.split('|');\n\n      return {\n        accountName,\n        currency,\n        balance,\n        availableBalance,\n        reservedAmount,\n        unClearedBalance,\n      };\n    }\n  );\n\n  return {\n    resultCode: data.Result.ResultCode,\n    status: 'success',\n    accountBalances: formattedAccountBalances,\n  };\n}\n","interface ResultParameter {\n  Key: string;\n  Value: string | number;\n}\n\ninterface ResultParameters {\n  ResultParameter: ResultParameter[];\n}\n\ninterface ReferenceItem {\n  Key: string;\n  Value: string;\n}\n\ninterface ReferenceData {\n  ReferenceItem: ReferenceItem;\n}\n\ninterface Result {\n  ResultType: number;\n  ResultCode: number;\n  ResultDesc: string;\n  OriginatorConversationID: string;\n  ConversationID: string;\n  TransactionID: string;\n  ResultParameters: ResultParameters;\n  ReferenceData: ReferenceData;\n}\n\ninterface BusinessToCustomerResponse {\n  Result: Result;\n}\n\ninterface TransactionDetails {\n  TransactionAmount: string | number;\n  TransactionReceipt: string;\n  ReceiverPartyPublicName: string;\n  TransactionCompletedDateTime: string;\n  B2CUtilityAccountAvailableFunds: string | number;\n  B2CWorkingAccountAvailableFunds: string | number;\n  B2CRecipientIsRegisteredCustomer: string;\n  B2CChargesPaidAccountAvailableFunds: string | number;\n}\n\n\ninterface PaymentResult {\n  status: 'success' | 'failed';\n  resultCode: number;\n  data?: TransactionDetails;\n}\n\nexport default function FormatBusinessToCustomer(\n  data: BusinessToCustomerResponse\n): PaymentResult {\n  const resultParameters = data.Result.ResultParameters.ResultParameter;\n\n  const keyMapping: { [key: string]: keyof TransactionDetails } = {\n    TransactionAmount: 'TransactionAmount',\n    TransactionReceipt: 'TransactionReceipt',\n    ReceiverPartyPublicName: 'ReceiverPartyPublicName',\n    TransactionCompletedDateTime: 'TransactionCompletedDateTime',\n    B2CUtilityAccountAvailableFunds: 'B2CUtilityAccountAvailableFunds',\n    B2CWorkingAccountAvailableFunds: 'B2CWorkingAccountAvailableFunds',\n    B2CRecipientIsRegisteredCustomer: 'B2CRecipientIsRegisteredCustomer',\n    B2CChargesPaidAccountAvailableFunds: 'B2CChargesPaidAccountAvailableFunds',\n  };\n\n  const transactionDetails: TransactionDetails = {\n    TransactionAmount: 0,\n    TransactionReceipt: '',\n    ReceiverPartyPublicName: '',\n    TransactionCompletedDateTime: '',\n    B2CUtilityAccountAvailableFunds: 0,\n    B2CWorkingAccountAvailableFunds: 0,\n    B2CRecipientIsRegisteredCustomer: '',\n    B2CChargesPaidAccountAvailableFunds: 0,\n  };\n\n  resultParameters.forEach(({ Key, Value }) => {\n    const propertyKey = keyMapping[Key] as keyof TransactionDetails & string;\n    if (propertyKey && typeof Value === 'number') {\n      transactionDetails[propertyKey] = Value.toString();\n    } else if (propertyKey) {\n      transactionDetails[propertyKey] = Value.toString();\n    }\n  });\n\n\n  if (data.Result.ResultCode === 0) {\n    return {\n      status: 'success',\n      resultCode: data.Result.ResultCode,\n      data: transactionDetails,\n    };\n  } else {\n    return {\n      status: 'failed',\n      resultCode: data.Result.ResultCode,\n    };\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map"}