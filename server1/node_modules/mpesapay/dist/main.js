import {Buffer as $hgUW1$Buffer} from "buffer";
import $hgUW1$axios from "axios";



var $34e4a7a60794ae21$require$Buffer = $hgUW1$Buffer;
async function $34e4a7a60794ae21$export$2e2bcd8739ae039(consumerKey, consumerSecret, environment) {
    const credentials = $34e4a7a60794ae21$require$Buffer.from(`${consumerKey}:${consumerSecret}`).toString("base64");
    const config = {
        headers: {
            Authorization: `Basic ${credentials}`
        }
    };
    try {
        const response = await (0, $hgUW1$axios).get(`${environment}/oauth/v1/generate?grant_type=client_credentials`, config);
        return response.data.access_token;
    } catch (error) {
        return null;
    }
}



function $a2f488f4a45e1a46$export$4c15b10155d7facd(amount, partyB, remarks, b2cSecurityCredential, callbackUrl, initiator, partyA) {
    return {
        InitiatorName: initiator,
        SecurityCredential: b2cSecurityCredential,
        CommandID: "BusinessPayment",
        Amount: amount,
        PartyA: parseInt(partyA),
        PartyB: partyB,
        Remarks: remarks,
        QueueTimeOutURL: callbackUrl,
        ResultURL: callbackUrl,
        Occassion: remarks
    };
}


async function $d84e7c32d0c429ff$export$2e2bcd8739ae039(accessToken) {
    const config = {
        headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json"
        }
    };
    return config;
}


async function $8a0db49e8f13a40c$export$2e2bcd8739ae039(amount, partyB, remarks, b2cSecurityCredential, callbackUrl, initiator, partyA, accessToken, environment) {
    const requestBody = (0, $a2f488f4a45e1a46$export$4c15b10155d7facd)(amount, partyB, remarks, b2cSecurityCredential, callbackUrl, initiator, partyA);
    try {
        const response = await (0, $hgUW1$axios).post(`${environment}/mpesa/b2c/v1/paymentrequest`, requestBody, await (0, $d84e7c32d0c429ff$export$2e2bcd8739ae039)(accessToken));
        return response.data;
    } catch (error) {
        return null;
    }
}


const $1cad8483fb9af53a$export$c0dbb1ea68a069d3 = new Date().toISOString().replace(/[^0-9]/g, "").slice(0, -3);



function $72cfe8590741892b$export$35aa830ac4b240fe(amount, phoneNumber, callbackUrl, timeStamp, password, businessShortCode, accountReference, transactionDesc) {
    return {
        BusinessShortCode: businessShortCode,
        Password: password,
        Timestamp: timeStamp,
        TransactionType: "CustomerPayBillOnline",
        Amount: amount,
        PartyA: phoneNumber,
        PartyB: businessShortCode,
        PhoneNumber: phoneNumber,
        CallBackURL: callbackUrl,
        AccountReference: accountReference,
        TransactionDesc: transactionDesc
    };
}





var $47c136d07e41a4a0$require$Buffer = $hgUW1$Buffer;
function $47c136d07e41a4a0$export$2e2bcd8739ae039(businessShortCode, passKey) {
    return $47c136d07e41a4a0$require$Buffer.from(`${businessShortCode}${passKey}${(0, $1cad8483fb9af53a$export$c0dbb1ea68a069d3)}`).toString("base64");
}


async function $567d675ac2407ab7$export$2e2bcd8739ae039(amount, phoneNumber, callbackUrl, businessShortCode, passkey, accessToken, environment, accountReference, transactionDesc) {
    const password = (0, $47c136d07e41a4a0$export$2e2bcd8739ae039)(businessShortCode, passkey);
    const requestBody = (0, $72cfe8590741892b$export$35aa830ac4b240fe)(amount, phoneNumber, callbackUrl, (0, $1cad8483fb9af53a$export$c0dbb1ea68a069d3), password, businessShortCode, accountReference, transactionDesc);
    try {
        const response = await (0, $hgUW1$axios).post(`${environment}/mpesa/stkpush/v1/processrequest`, requestBody, await (0, $d84e7c32d0c429ff$export$2e2bcd8739ae039)(accessToken));
        return response.data;
    } catch (error) {
        return null;
    }
}




function $7300aef31a77f700$export$2e2bcd8739ae039(transactionId, b2cSecurityCredential, callbackUrl, initiator, partyA) {
    return {
        Initiator: initiator,
        SecurityCredential: b2cSecurityCredential,
        CommandID: "TransactionStatusQuery",
        TransactionID: transactionId,
        PartyA: partyA,
        IdentifierType: "4",
        ResultURL: callbackUrl,
        QueueTimeOutURL: callbackUrl,
        Remarks: "done",
        Occasion: "OK"
    };
}


async function $e08926a1b68fb6f4$export$2e2bcd8739ae039(transactionId, callbackUrl, initiator, accessToken, b2cSecurityCredential, partyA, environment) {
    const requestBody = (0, $7300aef31a77f700$export$2e2bcd8739ae039)(transactionId, b2cSecurityCredential, callbackUrl, initiator, partyA);
    try {
        const response = await (0, $hgUW1$axios).post(`${environment}/mpesa/transactionstatus/v1/query`, requestBody, await (0, $d84e7c32d0c429ff$export$2e2bcd8739ae039)(accessToken));
        return response.data;
    } catch (error) {
        return null;
    }
}




function $c1a468856d899663$export$2e2bcd8739ae039(partyA, callbackUrl, initiator, b2cSecurityCredential) {
    return {
        Initiator: initiator,
        SecurityCredential: b2cSecurityCredential,
        CommandID: "AccountBalance",
        PartyA: partyA,
        IdentifierType: 4,
        Remarks: "done",
        QueueTimeOutURL: callbackUrl,
        ResultURL: callbackUrl
    };
}


async function $428328a62c0c3fd5$export$2e2bcd8739ae039(partyA, callbackUrl, initiatorName, b2cSecurityCredential, accessToken, environment) {
    const requestBody = (0, $c1a468856d899663$export$2e2bcd8739ae039)(partyA, callbackUrl, initiatorName, b2cSecurityCredential);
    try {
        const response = await (0, $hgUW1$axios).post(`${environment}/mpesa/accountbalance/v1/query`, requestBody, await (0, $d84e7c32d0c429ff$export$2e2bcd8739ae039)(accessToken));
        return response.data;
    } catch (error) {
        return null;
    }
}


class $aa964eece99dfe5f$var$MpesaPay {
    constructor(consumerKey, consumerSecret, businessShortCode, passkey, accountReference, transactionDesc, partyA, b2cSecurityCredential, initiatorName, environment = "sandbox"){
        this.consumerKey = consumerKey;
        this.consumerSecret = consumerSecret;
        this.businessShortCode = businessShortCode;
        this.passkey = passkey;
        this.accountReference = accountReference;
        this.transactionDesc = transactionDesc;
        this.partyA = partyA;
        this.b2cSecurityCredential = b2cSecurityCredential;
        this.initiatorName = initiatorName, this.environment = environment === "live" ? "https://api.safaricom.co.ke" : "https://sandbox.safaricom.co.ke";
    }
    //stkpush method for directly initiating a pop to the specified phonenumber with the amount to payed
    //accesstoken
    async AccessToken() {
        return await (0, $34e4a7a60794ae21$export$2e2bcd8739ae039)(this.consumerKey, this.consumerSecret, this.environment);
    }
    async stkPush(amount, phoneNumber, callbackUrl) {
        const accessToken = await this.AccessToken();
        return await (0, $567d675ac2407ab7$export$2e2bcd8739ae039)(amount, phoneNumber, callbackUrl, this.businessShortCode, this.passkey, accessToken, this.environment, this.accountReference, this.transactionDesc);
    }
    async transactionStatus(transactionId, callbackUrl) {
        const accessToken = await this.AccessToken();
        return await (0, $e08926a1b68fb6f4$export$2e2bcd8739ae039)(transactionId, callbackUrl, this.initiatorName, accessToken, this.b2cSecurityCredential, this.partyA, this.environment);
    }
    async business2Customer(PaymentAmount, receiversPhonenumber, remarks, callbackUrl) {
        const accessToken = await this.AccessToken();
        return await (0, $8a0db49e8f13a40c$export$2e2bcd8739ae039)(PaymentAmount, receiversPhonenumber, remarks, this.b2cSecurityCredential, callbackUrl, this.initiatorName, this.partyA, accessToken, this.environment);
    }
    async accountBalance(callbackUrl) {
        const accessToken = await this.AccessToken();
        return await (0, $428328a62c0c3fd5$export$2e2bcd8739ae039)(this.partyA, callbackUrl, this.initiatorName, this.b2cSecurityCredential, accessToken, this.environment);
    }
}
var $aa964eece99dfe5f$export$2e2bcd8739ae039 = $aa964eece99dfe5f$var$MpesaPay;


const $9fb3c830b267d941$var$usedReferenceNumbers = new Set();
function $9fb3c830b267d941$export$2e2bcd8739ae039(prefix, length) {
    let referenceNumber;
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    const charactersLength = characters.length;
    do {
        referenceNumber = `${prefix}-`;
        for(let i = 0; i < length; i++){
            const randomIndex = Math.floor(Math.random() * charactersLength);
            const randomChar = characters.charAt(randomIndex);
            referenceNumber += randomChar;
        }
    }while ($9fb3c830b267d941$var$usedReferenceNumbers.has(referenceNumber));
    $9fb3c830b267d941$var$usedReferenceNumbers.add(referenceNumber);
    return referenceNumber;
}


function $dca9c578c4ee60e5$export$2e2bcd8739ae039(data) {
    function extractData(data) {
        const { Amount: Amount, MpesaReceiptNumber: MpesaReceiptNumber, TransactionDate: TransactionDate, PhoneNumber: PhoneNumber } = data.Body.stkCallback.CallbackMetadata.Item.reduce((acc, item)=>{
            acc[item.Name] = item.Value;
            return acc;
        }, {});
        return {
            Amount: Amount,
            MpesaReceiptNumber: MpesaReceiptNumber,
            TransactionDate: TransactionDate,
            PhoneNumber: PhoneNumber
        };
    }
    const resultscode = data.Body.stkCallback.ResultCode;
    if (data && resultscode === 0) {
        const paymentinfo = extractData(data);
        return {
            status: "success",
            data: {
                Amount: paymentinfo.Amount,
                MpesaReceiptNumber: paymentinfo.MpesaReceiptNumber,
                PhoneNumber: paymentinfo.PhoneNumber,
                TransactionDate: paymentinfo.TransactionDate
            },
            resultCode: resultscode
        };
    } else {
        if (data && resultscode === 17) return {
            status: "failed",
            message: "Unable to process",
            resultCode: resultscode
        };
        else return {
            status: "canceled",
            message: "Canceled transaction",
            resultCode: resultscode
        };
    }
}


function $3ca5d6e97e31c44e$export$2e2bcd8739ae039(data) {
    const accountBalanceResult = data.Result.ResultParameters.ResultParameter.find((param)=>param.Key === "AccountBalance");
    if (!accountBalanceResult) return {
        resultCode: data.Result.ResultCode,
        status: "failed",
        accountBalances: []
    };
    const accountBalanceString = accountBalanceResult.Value;
    const accountBalanceItems = accountBalanceString.split("&");
    const formattedAccountBalances = accountBalanceItems.map((item)=>{
        const [accountName, currency, balance, availableBalance, reservedAmount, unClearedBalance] = item.split("|");
        return {
            accountName: accountName,
            currency: currency,
            balance: balance,
            availableBalance: availableBalance,
            reservedAmount: reservedAmount,
            unClearedBalance: unClearedBalance
        };
    });
    return {
        resultCode: data.Result.ResultCode,
        status: "success",
        accountBalances: formattedAccountBalances
    };
}


function $29d4404b30682b01$export$2e2bcd8739ae039(data) {
    const resultParameters = data.Result.ResultParameters.ResultParameter;
    const keyMapping = {
        TransactionAmount: "TransactionAmount",
        TransactionReceipt: "TransactionReceipt",
        ReceiverPartyPublicName: "ReceiverPartyPublicName",
        TransactionCompletedDateTime: "TransactionCompletedDateTime",
        B2CUtilityAccountAvailableFunds: "B2CUtilityAccountAvailableFunds",
        B2CWorkingAccountAvailableFunds: "B2CWorkingAccountAvailableFunds",
        B2CRecipientIsRegisteredCustomer: "B2CRecipientIsRegisteredCustomer",
        B2CChargesPaidAccountAvailableFunds: "B2CChargesPaidAccountAvailableFunds"
    };
    const transactionDetails = {
        TransactionAmount: 0,
        TransactionReceipt: "",
        ReceiverPartyPublicName: "",
        TransactionCompletedDateTime: "",
        B2CUtilityAccountAvailableFunds: 0,
        B2CWorkingAccountAvailableFunds: 0,
        B2CRecipientIsRegisteredCustomer: "",
        B2CChargesPaidAccountAvailableFunds: 0
    };
    resultParameters.forEach(({ Key: Key, Value: Value })=>{
        const propertyKey = keyMapping[Key];
        if (propertyKey && typeof Value === "number") transactionDetails[propertyKey] = Value.toString();
        else if (propertyKey) transactionDetails[propertyKey] = Value.toString();
    });
    if (data.Result.ResultCode === 0) return {
        status: "success",
        resultCode: data.Result.ResultCode,
        data: transactionDetails
    };
    else return {
        status: "failed",
        resultCode: data.Result.ResultCode
    };
}




var $149c1bd638913645$export$2e2bcd8739ae039 = (0, $aa964eece99dfe5f$export$2e2bcd8739ae039);


export {$149c1bd638913645$export$2e2bcd8739ae039 as default, $9fb3c830b267d941$export$2e2bcd8739ae039 as generateUniqueReferenceNumber, $dca9c578c4ee60e5$export$2e2bcd8739ae039 as FormatPaymentData, $3ca5d6e97e31c44e$export$2e2bcd8739ae039 as FormatAccountBalance, $29d4404b30682b01$export$2e2bcd8739ae039 as FormatBusinessToCustomer};
//# sourceMappingURL=main.js.map
